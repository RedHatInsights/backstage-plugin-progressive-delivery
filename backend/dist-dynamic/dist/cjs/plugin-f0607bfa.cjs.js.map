{"version":3,"file":"plugin-f0607bfa.cjs.js","sources":["../../src/service/router.ts","../../src/plugin.ts"],"sourcesContent":["import { errorHandler, loadBackendConfig } from '@backstage/backend-common';\nimport express from 'express';\nimport Router from 'express-promise-router';\nimport { Logger } from 'winston';\n\nexport interface RouterOptions {\n  logger: Logger;\n}\n\nexport async function createRouter(\n  options: RouterOptions,\n): Promise<express.Router> {\n  const { logger } = options;\n\n  const router = Router();\n  router.use(express.json());\n\n  router.get('/health', (_, response) => {\n    logger.info('PONG!');\n    response.json({ status: 'ok' });\n  });\n  router.get('/topo', (_, response) => {\n    loadBackendConfig({logger: logger, argv: []})\n      .then((config) => {\n        response.sendFile(config.getString('progressive-delivery.saas-promotions-json'));\n    }).catch((error) => {\n        console.log(\"No config\");\n        console.log(error);\n        response.sendStatus(500);\n      });\n  })\n  router.use(errorHandler());\n  return router;\n}\n\n\n","import { loggerToWinstonLogger } from '@backstage/backend-common';\nimport { coreServices, createBackendPlugin } from '@backstage/backend-plugin-api';\n\nimport { createRouter } from './service/router';\n\n/**\n * The progressive-delivery backend plugin.\n *\n * @alpha\n */\nexport const progressive_deliveryPlugin = createBackendPlugin({\n  pluginId: 'plugin-progressive-delivery',\n  register(env) {\n    env.registerInit({\n      deps: {\n        logger: coreServices.logger,\n        config: coreServices.rootConfig,\n        http: coreServices.httpRouter,\n      },\n      async init({ config, logger, http }) {\n        logger.info(\"Initing progressive-delivery plugin\");\n        http.use(() => createRouter({...config, logger: loggerToWinstonLogger(logger)}));\n        http.addAuthPolicy({ path: '/health', allow: 'unauthenticated'});\n        http.addAuthPolicy({ path: '/topo', allow: 'unauthenticated'});\n      },\n    });\n  },\n});\n"],"names":["Router","express","loadBackendConfig","errorHandler","createBackendPlugin","coreServices","loggerToWinstonLogger"],"mappings":";;;;;;;;;;;;AASA,eAAsB,aACpB,OACyB,EAAA;AACzB,EAAM,MAAA,EAAE,QAAW,GAAA,OAAA,CAAA;AAEnB,EAAA,MAAM,SAASA,0BAAO,EAAA,CAAA;AACtB,EAAO,MAAA,CAAA,GAAA,CAAIC,2BAAQ,CAAA,IAAA,EAAM,CAAA,CAAA;AAEzB,EAAA,MAAA,CAAO,GAAI,CAAA,SAAA,EAAW,CAAC,CAAA,EAAG,QAAa,KAAA;AACrC,IAAA,MAAA,CAAO,KAAK,OAAO,CAAA,CAAA;AACnB,IAAA,QAAA,CAAS,IAAK,CAAA,EAAE,MAAQ,EAAA,IAAA,EAAM,CAAA,CAAA;AAAA,GAC/B,CAAA,CAAA;AACD,EAAA,MAAA,CAAO,GAAI,CAAA,OAAA,EAAS,CAAC,CAAA,EAAG,QAAa,KAAA;AACnC,IAAkBC,+BAAA,CAAA,EAAC,QAAgB,IAAM,EAAA,IAAG,CAAA,CACzC,IAAK,CAAA,CAAC,MAAW,KAAA;AAChB,MAAA,QAAA,CAAS,QAAS,CAAA,MAAA,CAAO,SAAU,CAAA,2CAA2C,CAAC,CAAA,CAAA;AAAA,KAClF,CAAA,CAAE,KAAM,CAAA,CAAC,KAAU,KAAA;AAChB,MAAA,OAAA,CAAQ,IAAI,WAAW,CAAA,CAAA;AACvB,MAAA,OAAA,CAAQ,IAAI,KAAK,CAAA,CAAA;AACjB,MAAA,QAAA,CAAS,WAAW,GAAG,CAAA,CAAA;AAAA,KACxB,CAAA,CAAA;AAAA,GACJ,CAAA,CAAA;AACD,EAAO,MAAA,CAAA,GAAA,CAAIC,4BAAc,CAAA,CAAA;AACzB,EAAO,OAAA,MAAA,CAAA;AACT;;ACvBO,MAAM,6BAA6BC,oCAAoB,CAAA;AAAA,EAC5D,QAAU,EAAA,6BAAA;AAAA,EACV,SAAS,GAAK,EAAA;AACZ,IAAA,GAAA,CAAI,YAAa,CAAA;AAAA,MACf,IAAM,EAAA;AAAA,QACJ,QAAQC,6BAAa,CAAA,MAAA;AAAA,QACrB,QAAQA,6BAAa,CAAA,UAAA;AAAA,QACrB,MAAMA,6BAAa,CAAA,UAAA;AAAA,OACrB;AAAA,MACA,MAAM,IAAK,CAAA,EAAE,MAAQ,EAAA,MAAA,EAAQ,MAAQ,EAAA;AACnC,QAAA,MAAA,CAAO,KAAK,qCAAqC,CAAA,CAAA;AACjD,QAAK,IAAA,CAAA,GAAA,CAAI,MAAM,YAAA,CAAa,EAAC,GAAG,MAAQ,EAAA,MAAA,EAAQC,mCAAsB,CAAA,MAAM,CAAC,EAAC,CAAC,CAAA,CAAA;AAC/E,QAAA,IAAA,CAAK,cAAc,EAAE,IAAA,EAAM,SAAW,EAAA,KAAA,EAAO,mBAAkB,CAAA,CAAA;AAC/D,QAAA,IAAA,CAAK,cAAc,EAAE,IAAA,EAAM,OAAS,EAAA,KAAA,EAAO,mBAAkB,CAAA,CAAA;AAAA,OAC/D;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAC;;;;;"}