{"version":3,"file":"index-0e43a927.esm.js","sources":["../../src/components/ProgressiveDeliveryComponent/ProgressiveDeliveryComponent.tsx"],"sourcesContent":["import React, { useEffect, useState }  from 'react';\nimport { DependencyGraph, DependencyGraphTypes, InfoCard } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\n\nconst MANY_TO_MANY_NODE_LABEL = \"soak\";\n\ninterface SaasPromotionsData {\n    nodes: string[];\n    edges: [string, string][];\n}\n\ninterface Node {\n    app: string;\n    saas: string;\n    resourceTemplate: string;\n    target: string | undefined;\n    cluster: string | undefined;\n    namespace: string | undefined;\n    isTest: boolean;\n    commit_sha: string | undefined;\n    deployment_state: \"success\" | \"missing\" | \"failed\" | undefined;\n}\n\nfunction simplifyManyToMany(edges: [string, string][]): [string, string][] {\n  let node_origins: { [key: string]: Set<string> } = {};\n\n  for (const [o, t] of edges) {\n    if (!(t in node_origins)) {\n      node_origins[t] = new Set();\n    }\n    node_origins[t].add(o);\n}\n\n  let node_origins_lookup: { [key: string]: Set<string> } = {};\n  for (const [k, v] of Object.entries(node_origins)) {\n      const key = JSON.stringify(Array.from(v));\n      if (!(key in node_origins_lookup)) {\n          node_origins_lookup[key] = new Set();\n      }\n      node_origins_lookup[key].add(k);\n  }\n\n  let multi_origins: { [key: string]: number } = {};\n  for (const [_t, origins] of Object.entries(node_origins)) {\n      if (origins.size > 1) {\n          const originsKey = JSON.stringify(Array.from(origins));\n          if (!(originsKey in multi_origins)) {\n              multi_origins[originsKey] = 0;\n          }\n          multi_origins[originsKey] += 1;\n      }\n  }\n\n  let index = 0;\n  for (const [originsKey, count] of Object.entries(multi_origins)) {\n      if (count > 1) {\n          const many_to_many_node = `${MANY_TO_MANY_NODE_LABEL}-${index++}`;\n          const origins = JSON.parse(originsKey) as string[];\n          const targets = node_origins_lookup[originsKey];\n          for (const o of origins) {\n              for (const t of Array.from(targets)) {\n                  edges = edges.filter(edge => !(edge[0] === o && edge[1] === t));\n\n                  if (!edges.some(e => e[0] === o && e[1] === many_to_many_node))\n                    edges.push([o, many_to_many_node]);\n\n                  if (!edges.some(e => e[0] === many_to_many_node && e[1] === t))\n                    edges.push([many_to_many_node, t]);\n              }\n          }\n      }\n  }\n\n  return edges;\n}\n\n\nexport const TopologyComponent = () => {\n  const [topo, setTopo] = useState(\"{}\");\n  const config = useApi(configApiRef);\n  const baseUrl = config.getString('backend.baseUrl');\n\n  useEffect(() => {\n    fetch(baseUrl + \"/api/plugin-progressive-delivery-backend/topo\")\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        return setTopo(data);\n      })\n  }, [])\n\n  const entity = useEntity().entity;\n  let name = entity.metadata.name.toLowerCase();\n  if (entity.spec && entity.spec.system) {\n    name = entity.spec.system.toString()\n  }\n\n  if (topo !== \"{}\") {\n    try {\n      var rawData: SaasPromotionsData = JSON.parse(topo);\n    } catch {\n      return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        Error parsing json\n      </InfoCard>);\n    }\n\n    let rawEdges = rawData.edges.filter(([f, t])=>{\n      const from = JSON.parse(f);\n      const to = JSON.parse(t);\n      return from.app.toLowerCase() === name.toLowerCase() || to.app.toLowerCase() === name.toLowerCase();\n    });\n\n    rawEdges = simplifyManyToMany(rawEdges);\n\n    const uniqueNodeSet = new Set<string>();\n    rawEdges.forEach(([f, t]) => {\n      uniqueNodeSet.add(f);\n      uniqueNodeSet.add(t);\n    });\n\n    const nodes: DependencyGraphTypes.DependencyNode[] = Array.from(uniqueNodeSet).map((n: string) => ({ id: n}));\n\n    const edges: DependencyGraphTypes.DependencyEdge[] = rawEdges.map(([f,t]) => ({from: f, to: t}));\n\n    return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        <DependencyGraph\n          nodes={nodes}\n          edges={edges}\n          showArrowHeads={true}\n          renderNode={CustomNodeRenderer}\n          direction={DependencyGraphTypes.Direction.LEFT_RIGHT}/>\n      </InfoCard>\n    );\n  } else {\n    return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        Processing ...\n      </InfoCard>\n    );\n  }\n}\n\nfunction CustomNodeRenderer({ node: { id } }: DependencyGraphTypes.RenderNodeProps) {\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const idRef = React.useRef<SVGTextElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    // set the width to the length of the ID\n    if (idRef.current) {\n      let { height: renderedHeight, width: renderedWidth } =\n        idRef.current.getBBox();\n      renderedHeight = Math.round(renderedHeight);\n      renderedWidth = Math.round(renderedWidth);\n\n      if (renderedHeight !== height || renderedWidth !== width) {\n        setWidth(renderedWidth);\n        setHeight(renderedHeight);\n      }\n    }\n  }, [width, height]);\n\n  const padding = 10;\n  const paddedWidth = width + padding * 2;\n  const paddedHeight = height + padding * 2;\n\n  if (id.match(new RegExp(`^${MANY_TO_MANY_NODE_LABEL}-\\\\d+$`))) {\n    const classes = useStyles({ isTest: false });\n    return (<g>\n      <rect\n        className={classes.node}\n        width={paddedWidth}\n        height={paddedHeight}\n        rx={10}\n      />\n      <text\n        ref={idRef}\n        className={classes.text}\n        y={paddedHeight / 2}\n        x={paddedWidth / 2}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        {MANY_TO_MANY_NODE_LABEL}\n      </text>\n    </g>);\n  }\n\n  const node: Node = JSON.parse(id);\n\n  let sha: string = \"none\";\n  if (node.commit_sha) {\n    sha = node.commit_sha.length >= 32? node.commit_sha?.substring(0,7) : node.commit_sha!;\n  }\n  let dep: string = node.deployment_state == \"success\" ? '✅' : '❌';\n  const num_of_bolds: number = 1;\n  let label: string[] = [\n    `${node.resourceTemplate}/${node.target}`,\n    `on ${node.cluster}/${node.namespace} (${node.saas})`,\n    `${sha} ${dep}`,\n  ];\n  let tspans = label.map((l, i) => {\n    return (\n      <tspan\n        x={paddedWidth / 2}\n\n        // We can't use paddedHeight because we'll recalculate the height while\n        // adding to the height, which causes an infinite loop.\n        y={(i+1) * 2 * padding}\n        fontWeight={i < num_of_bolds ? \"bold\" : \"normal\"}\n      >\n        {l}\n      </tspan>);\n  });\n\n  const classes = useStyles({ isTest: node.isTest });\n  return (\n    <g>\n      <rect\n        className={classes.node}\n        width={paddedWidth}\n        height={paddedHeight}\n        rx={10}\n      />\n      <text\n        ref={idRef}\n        className={classes.text}\n        y={paddedHeight / 2}\n        x={paddedWidth * 2}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        {tspans}\n      </text>)\n    </g>\n  );\n}\n\nconst useStyles = makeStyles(\n  theme => ({\n    node: {\n      fill: (props) => {\n        let isTest = extractBool(props)\n        if (isTest) {\n            return '#FFF3D1';\n        } else {\n            return '#DCE8FA';\n        }\n      },\n      stroke: (props) => {\n          let isTest = extractBool(props)\n          if (isTest) {\n              return '#FFE59E';\n          } else {\n              return '#9BB3D6';\n          }\n      },\n    },\n    edge: {\n      strokeWidth: 2,\n    },\n    path: {\n      strokeWidth: 2,\n    },\n    text: {\n      fill: () => {\n        if (theme.palette.type === \"light\" ) {\n          return 'black';\n        } else {\n          return theme.palette.primary.contrastText;\n        }\n      },\n    },\n  }),\n  { name: 'BackstageDependencyGraphDefaultNode' },\n);\n\nfunction extractBool(props: { isTest?: boolean; }) {\n    if (props.isTest) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"names":["classes"],"mappings":"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"}