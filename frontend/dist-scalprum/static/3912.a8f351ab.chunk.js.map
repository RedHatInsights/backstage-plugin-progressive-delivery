{"version":3,"file":"static/3912.a8f351ab.chunk.js","mappings":"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","sources":["webpack://plugin-progressive-delivery/./src/components/ProgressiveDeliveryComponent/ProgressiveDeliveryComponent.tsx"],"sourcesContent":["import React, { useEffect, useState }  from 'react';\nimport { DependencyGraph, DependencyGraphTypes, InfoCard } from '@backstage/core-components';\nimport { useEntity } from '@backstage/plugin-catalog-react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { configApiRef, useApi } from '@backstage/core-plugin-api';\n\ninterface SaasPromotionsData {\n    nodes: string[];\n    edges: [string, string][];\n}\n\ninterface Node {\n    app: string;\n    saas: string;\n    resourceTemplate: string;\n    target: string | undefined;\n    cluster: string | undefined;\n    namespace: string | undefined;\n    isTest: boolean;\n    commit_sha: string | undefined;\n    deployment_state: \"success\" | \"missing\" | \"failed\" | undefined;\n}\n\n/*\ninterface Edge {\n    from: Node;\n    to: Node;\n}\n*/\n\nfunction simplifyManyToMany(edges: [string, string][]): [string, string][] {\n  let node_origins: { [key: string]: Set<string> } = {};\n\n  for (const [o, t] of edges) {\n    if (!(t in node_origins)) {\n      node_origins[t] = new Set();\n    }\n    node_origins[t].add(o);\n}\n\n  let node_origins_lookup: { [key: string]: Set<string> } = {};\n  for (const [k, v] of Object.entries(node_origins)) {\n      const key = JSON.stringify(Array.from(v));\n      if (!(key in node_origins_lookup)) {\n          node_origins_lookup[key] = new Set();\n      }\n      node_origins_lookup[key].add(k);\n  }\n\n  let multi_origins: { [key: string]: number } = {};\n  for (const [_t, origins] of Object.entries(node_origins)) {\n      if (origins.size > 1) {\n          const originsKey = JSON.stringify(Array.from(origins));\n          if (!(originsKey in multi_origins)) {\n              multi_origins[originsKey] = 0;\n          }\n          multi_origins[originsKey] += 1;\n      }\n  }\n\n  let index = 0;\n  for (const [originsKey, count] of Object.entries(multi_origins)) {\n      if (count > 1) {\n          const many_to_many_node = `soak-${index++}`;\n          const origins = JSON.parse(originsKey) as string[];\n          const targets = node_origins_lookup[originsKey];\n          for (const o of origins) {\n              for (const t of Array.from(targets)) {\n                  edges = edges.filter(edge => !(edge[0] === o && edge[1] === t));\n\n                  if (!edges.some(e => e[0] === o && e[1] === many_to_many_node))\n                    edges.push([o, many_to_many_node]);\n\n                  if (!edges.some(e => e[0] === many_to_many_node && e[1] === t))\n                    edges.push([many_to_many_node, t]);\n              }\n          }\n      }\n  }\n\n  return edges;\n}\n\n\nexport const TopologyComponent = () => {\n  const [topo, setTopo] = useState(\"{}\");\n  const config = useApi(configApiRef);\n  const baseUrl = config.getString('backend.baseUrl');\n\n  useEffect(() => {\n    fetch(baseUrl + \"/api/plugin-progressive-delivery-backend/topo\")\n      .then(response => {\n        return response.text();\n      })\n      .then(data => {\n        return setTopo(data);\n      })\n  }, [])\n\n  const name = useEntity().entity.metadata.name.toLowerCase();\n\n  if (topo !== \"{}\") {\n    try {\n      var rawData: SaasPromotionsData = JSON.parse(topo);\n    } catch {\n      return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        Error parsing json\n      </InfoCard>);\n    }\n\n    console.log(\"Data: \", rawData);\n\n    let rawEdges = rawData.edges.filter(([f, t])=>{\n      const from = JSON.parse(f);\n      const to = JSON.parse(t);\n      return from.app.toLowerCase() === name.toLowerCase() || to.app.toLowerCase() === name.toLowerCase();\n    });\n\n    rawEdges = simplifyManyToMany(rawEdges);\n\n    console.log(\"Edges: \", rawEdges);\n\n    const uniqueNodeSet = new Set<string>();\n    rawEdges.forEach(([f, t]) => {\n      uniqueNodeSet.add(f);\n      uniqueNodeSet.add(t);\n    });\n    rawData.nodes.map((n) => JSON.parse(n))\n      .filter((n: Node) => n.app.toLowerCase() == name.toLowerCase())\n      .forEach((n: Node) => uniqueNodeSet.add(JSON.stringify(n)));\n\n    console.log(\"Nodes: \", uniqueNodeSet);\n\n    const nodes: DependencyGraphTypes.DependencyNode[] = Array.from(uniqueNodeSet).map((n: string) => ({ id: n}));\n\n    const edges: DependencyGraphTypes.DependencyEdge[] = rawEdges.map(([f,t]) => ({from: f, to: t}));\n\n    return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        <DependencyGraph\n          nodes={nodes}\n          edges={edges}\n          showArrowHeads={true}\n          renderNode={CustomNodeRenderer}\n          direction={DependencyGraphTypes.Direction.LEFT_RIGHT}/>\n      </InfoCard>\n    );\n  } else {\n    return (\n      <InfoCard title=\"Progressive Delivery Topology\">\n        Processing ...\n      </InfoCard>\n    );\n  }\n}\n\nfunction CustomNodeRenderer({ node: { id } }: DependencyGraphTypes.RenderNodeProps) {\n  const [width, setWidth] = React.useState(0);\n  const [height, setHeight] = React.useState(0);\n  const idRef = React.useRef<SVGTextElement | null>(null);\n\n  React.useLayoutEffect(() => {\n    // set the width to the length of the ID\n    if (idRef.current) {\n      let { height: renderedHeight, width: renderedWidth } =\n        idRef.current.getBBox();\n      renderedHeight = Math.round(renderedHeight);\n      renderedWidth = Math.round(renderedWidth);\n\n      if (renderedHeight !== height || renderedWidth !== width) {\n        setWidth(renderedWidth);\n        setHeight(renderedHeight);\n      }\n    }\n  }, [width, height]);\n\n  const padding = 10;\n  const paddedWidth = width + padding * 2;\n  const paddedHeight = height + padding * 2;\n\n  let node: Node = JSON.parse(id);\n  let sha: string = \"none\";\n  if (node.commit_sha) {\n    sha = node.commit_sha.length >= 32? node.commit_sha?.substring(0,7) : node.commit_sha!;\n  }\n  let dep: string = node.deployment_state == \"success\" ? '✅' : '❌';\n  const num_of_bolds: number = 1;\n  let label: string[] = [\n    `${node.resourceTemplate}/${node.target}`,\n    `on ${node.cluster}/${node.namespace} (${node.saas})`,\n    `${sha} ${dep}`,\n  ];\n  let tspans = label.map((l, i) => {\n    return (\n      <tspan\n        x={paddedWidth / 2}\n\n        // We can't use paddedHeight because we'll recalculate the height while\n        // adding to the height, which causes an infinite loop.\n        y={(i+1) * 2 * padding}\n        fontWeight={i < num_of_bolds ? \"bold\" : \"normal\"}\n      >\n        {l}\n      </tspan>);\n  });\n\n  const classes = useStyles({ isTest: node.isTest });\n  return (\n    <g>\n      <rect\n        className={classes.node}\n        width={paddedWidth}\n        height={paddedHeight}\n        rx={10}\n      />\n      <text\n        ref={idRef}\n        className={classes.text}\n        y={paddedHeight / 2}\n        x={paddedWidth * 2}\n        textAnchor=\"middle\"\n        alignmentBaseline=\"middle\"\n      >\n        {tspans}\n      </text>)\n    </g>\n  );\n}\n\nconst useStyles = makeStyles(\n  theme => ({\n    node: {\n      fill: (props) => {\n        let isTest = extractBool(props)\n        if (isTest) {\n            return '#FFF3D1';\n        } else {\n            return '#DCE8FA';\n        }\n      },\n      stroke: (props) => {\n          let isTest = extractBool(props)\n          if (isTest) {\n              return '#FFE59E';\n          } else {\n              return '#9BB3D6';\n          }\n      },\n    },\n    edge: {\n      strokeWidth: 2,\n    },\n    path: {\n      strokeWidth: 2,\n    },\n    text: {\n      fill: () => {\n        if (theme.palette.type === \"light\" ) {\n          return 'black';\n        } else {\n          return theme.palette.primary.contrastText;\n        }\n      },\n    },\n  }),\n  { name: 'BackstageDependencyGraphDefaultNode' },\n);\n\nfunction extractBool(props: { isTest?: boolean; }) {\n    if (props.isTest) {\n        return true;\n    } else {\n        return false;\n    }\n}\n"],"names":["TopologyComponent","topo","setTopo","useState","baseUrl","useApi","configApiRef","getString","useEffect","fetch","then","response","text","data","name","useEntity","entity","metadata","toLowerCase","rawData","JSON","parse","InfoCard","title","console","log","rawEdges","edges","filter","f","t","from","to","app","node_origins","o","Set","add","node_origins_lookup","k","v","Object","entries","key","stringify","Array","multi_origins","_t","origins","size","originsKey","index","count","many_to_many_node","targets","edge","some","e","push","simplifyManyToMany","uniqueNodeSet","forEach","nodes","map","n","id","DependencyGraph","showArrowHeads","renderNode","CustomNodeRenderer","direction","DependencyGraphTypes","Direction","LEFT_RIGHT","node","width","setWidth","React","height","setHeight","idRef","current","renderedHeight","renderedWidth","getBBox","Math","round","paddedWidth","padding","paddedHeight","sha","commit_sha","length","substring","dep","deployment_state","tspans","resourceTemplate","target","cluster","namespace","saas","l","i","tspan","x","y","fontWeight","classes","useStyles","isTest","g","rect","className","rx","ref","textAnchor","alignmentBaseline","makeStyles","theme","fill","props","extractBool","stroke","strokeWidth","path","palette","type","primary","contrastText"],"sourceRoot":""}